// <auto-generated />
using System;
using LessonService.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LessonService.Infrastructure.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250121161845_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("lessonsrv")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LessonGroupStudent", b =>
                {
                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonGroupsLessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonGroupsStudentId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentsId", "LessonGroupsLessonId", "LessonGroupsStudentId");

                    b.HasIndex("LessonGroupsLessonId", "LessonGroupsStudentId");

                    b.ToTable("LessonGroupStudents", "lessonsrv");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60);

                    b.Property<int>("LessonStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("LessonType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("MaxStudents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TrainerId")
                        .HasColumnType("uuid");

                    b.Property<int>("TrainingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Lessons", "lessonsrv");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.LessonGroup", b =>
                {
                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("LessonId", "StudentId");

                    b.ToTable("LessonGroups", "lessonsrv");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students", "lessonsrv");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Trainers", "lessonsrv");
                });

            modelBuilder.Entity("LessonGroupStudent", b =>
                {
                    b.HasOne("LessonService.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonService.Domain.Entities.LessonGroup", null)
                        .WithMany()
                        .HasForeignKey("LessonGroupsLessonId", "LessonGroupsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonService.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("LessonService.Domain.Entities.Trainer", "Trainer")
                        .WithMany("Lessons")
                        .HasForeignKey("TrainerId");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.LessonGroup", b =>
                {
                    b.HasOne("LessonService.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonGroups")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("LessonGroups");
                });

            modelBuilder.Entity("LessonService.Domain.Entities.Trainer", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
